#version 330

in vec3 EntryPoint;
in vec4 ExitPointCoord;

uniform sampler2D ExitPoints;
uniform sampler3D VolumeTex;
uniform sampler1D TransferFunc;  
uniform float     StepSize;
uniform float     AlphaReduce;
uniform vec2      ScreenSize;

layout (location = 0) out vec4 FragColor;

void main()
{
	//gl_FragCoord --> http://www.txutxi.com/?p=182
	vec3 exitPoint = texture(ExitPoints, gl_FragCoord.st/ScreenSize).xyz;

	//background need no raycasting
	if (EntryPoint == exitPoint)
		discard;
	
	vec3 rayDirection = normalize(exitPoint - EntryPoint);
	vec4 currentPosition = vec4(EntryPoint, 0.0f);
	vec4 colorSum = vec4(.0f,.0f,.0f,0.0f);
	vec4 color = vec4(0.0f,0.0f,0.0f,0.0f);
	vec4 value = vec4(0.0f);

	vec3 Step = rayDirection * StepSize;
	float stepLength= length(Step);
	float LengthSum = 0.0f;
	float Length = length(exitPoint - EntryPoint);
	
	for(int i=0; i < 16000; i++)
	{
		currentPosition.w = 0.0f;
		//value --> (nx,ny,nz,isovalue)
		value = texture(VolumeTex, currentPosition.xyz).rgba;

		//color --> TransferovaFunkcia(value.a == isovalue)
		color = texture(TransferFunc, value.a);		

		//reduce the alpha to have a more transparent result
		color.a *= AlphaReduce;
		
		//diffuse shading + fake ambient lighting
		float s = max(dot(value.xyz, value.xyz),0.0);
		color.rgb = s * color.rgb + .1f * color.rgb;

		//Front to back blending
		color.rgb *= color.a;
		colorSum = (1.0f - colorSum.a) * color + colorSum;
		
		//accumulate length
		LengthSum += stepLength;

		//break from the loop when alpha gets high enough
		if(colorSum.a >= .95f)
			break;
		
		//advance the current position
		currentPosition.xyz += Step;

		//break if the ray is outside of the bounding box
		if(LengthSum >= Length)
			break;
	}
	FragColor = colorSum;
}
