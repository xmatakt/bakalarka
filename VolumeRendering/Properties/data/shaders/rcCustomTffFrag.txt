#version 330

in vec3 EntryPoint;

uniform sampler2D ExitPoints;
uniform sampler3D VolumeTex;
uniform sampler1D TransferFunc;  
uniform float     StepSize;
uniform float     AlphaReduce;
uniform float     scaleCoeff;
uniform vec2      ScreenSize;

//uniform mat4 normalMatrix;

layout (location = 0) out vec4 FragColor;

void main()
{
	//gl_FragCoord --> http://www.txutxi.com/?p=182
	vec3 exitPoint = texture(ExitPoints, gl_FragCoord.st/ScreenSize).xyz;
	vec3 rayDirection = normalize(exitPoint - EntryPoint);

	//odstranenie miznutia objektu pri prilisnom priblizeni
	vec3 entryPoint = vec3(0.0f);

	if(scaleCoeff >= 2.7f)
	{
		float tmp = min((scaleCoeff - 2.7f) * 0.1f, 1.0f);
		entryPoint = EntryPoint + tmp * (exitPoint - EntryPoint);//rayDirection;
	}
	else
	{
		entryPoint = EntryPoint;
	}
	//

	//vec3 entryPoint = EntryPoint + 0.0f * rayDirection;

	//background need no raycasting
	if (entryPoint == exitPoint)
		discard;
	
	//vec3 rayDirection = normalize(exitPoint - entryPoint);
	vec4 currentPosition = vec4(entryPoint, 0.0f);
	vec4 colorSum = vec4(0.0f,0.0f,0.0f,0.0f);
	vec4 color = vec4(0.0f);
	float value = .0f;

	vec3 Step = rayDirection * StepSize;
	float stepLength= length(Step);
	float LengthSum = 0.0f;
	float alphaSum = .0f;
	float Length = length(exitPoint - entryPoint);
	float d = round(Length/StepSize);
	
	for(int i=0; i < d; i++)
	{
		currentPosition.w = 0.0f;
		value = texture(VolumeTex, currentPosition.xyz).a;
		color = texture(TransferFunc, value);

		//reduce the alpha to have a more transparent result
		color.a *= AlphaReduce;
		color.rgb *= color.a;

		//Front to back blending
		//colorSum += (1.0f - alphaSum) * color;
		//alphaSum += (1.0f - alphaSum) * color.a;

		colorSum += (1.0f - colorSum.a) * color;
		
		//accumulate length
		LengthSum += stepLength;

		//break from the loop when alpha gets high enough
		if(colorSum.a >= .95f)
			break;
		
		//advance the current position
		currentPosition.xyz += Step;

		//break if the ray is outside of the bounding box
		if(LengthSum >= Length)
			break;
	}
	FragColor = colorSum;
}
