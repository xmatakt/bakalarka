#version 330

uniform mat4 projectionMatrix;
uniform mat4 modelViewMatrix;
uniform mat4 normalMatrix;
uniform vec3 eye;

layout (location = 0) in vec3 inPosition;
layout (location = 1) in vec3 inColor;
layout (location = 2) in vec3 inNormal;

struct DirectionalLight
{
	vec3 ambient;	
	vec3 diffuse;
	vec3 specular;
	vec3 direction;
};

uniform DirectionalLight light;

struct Material
{
	float specCoef; 	//[0,1]
	float diffCoef;		//[0,1]
	float ambCoef;		//[0,1]
	int shininess;		//[0,128]
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

uniform Material material;

out vec3 TheColor;

void main()
{
	vec3 lightDirection, normal3, diffuse, ambient, specular, R;
	vec4 normal4;
	float NdotL, RdotEye;

	//transformacia normaly do eye space a znormovanie vysledku
	normal4=normalMatrix * normalize(vec4(inNormal,1.0));
	normal3=normalize(normal4.xyz);	

	lightDirection = normalize(light.direction);
	specular = vec3(0.0);
	
	//cos uhla medzi normalov a lucom, ak je vyseldok zaporny, svetlo prichadza zozadu, preto max(...,0.0)
	NdotL = max(dot(normal3,-lightDirection),0.0);	
	//NdotL = dot(normal3,lightDirection);

	//vypocet odrazeneho luca R
	R = 2.0 * NdotL * normal3  + lightDirection;
	R = normalize(R);
	RdotEye = dot(R,normalize(eye));

	//diffuse = light.diffuse * material.diffuse * material.diffCoef;
	diffuse =  material.diffCoef * light.diffuse * NdotL;//iny zdroj z netu

	ambient = light.ambient * material.ambCoef;
	
	if(RdotEye > 0.0)
	{
		//specular =  material.specCoef * light.specular *  material.specular * pow(RdotEye, material.shininess); 
		specular =  material.specCoef * light.specular * pow(RdotEye, material.shininess);//iny zdroj z netu
	}

	//TheColor = (NdotL * diffuse + ambient + specular) * inColor;
	TheColor = (diffuse + ambient + specular) * inColor;

	gl_Position = projectionMatrix*modelViewMatrix*vec4(inPosition, 1.0);	
}

//Vytvorene s pomocou:
//http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/lighting/

























